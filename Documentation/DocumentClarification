Instructions d'installation :
Une fois que vous avez cloner le code, pensez à lancer la création de la base de donnée avec votreip:port/createdb
Ou utilisez la bdd mise en pièce jointe.

Le projet doit contenir 4 parties principales:

	-Un agent, qui tournera sur le pc de l'hôte et qui récupèrera toutes les données nécessaires de l'ordinateur (nom de l'hôte, noyau linux). Ce même agent devra envoyer les données récupérées à un serveur (protocole http, format de donnée libre). L'agent disposera d'un fichier de configuration où des noms de services sont indiqués, il faudra qu'il vérifie si ces services sont actifs ou non.
	-Une base de donnée, qui stockera les données de l'hôte.
	-Un serveur, permettant de faire le lien entre les différentes parties. Il reçoit les données de l'agent et c'est lui qui les stockera dans la base de donnée. Il assurera l'affichage des informations recueillis sur une page web.
	-Une interface graphique, qui est en réalité une simple page web qui utilisera Google Charts pour les graphiques.

Les agents tourneront que sur des ordinateurs ayant comme système d'exploitation un Linux.

Tous les aspects concernant la sécurité (Authentification, SSL) ne seront pas traités.  

Nous nous sommes mis d'accord pour utiliser GitHub comme gestionnaire de version.

Nous listons ensuite les différentes fonctionnalités nécessaires afin de répondre au besoin:

Fonctionnalité n°1: 
-fichier : agent.py
-But :Récupérer les informations du système
-Personne responsable: Yanis
-Etapes:
	-Récupérer l'information (psutil, éxecution de commande terminal avec subprocess ou en regardant dans le système de fichier Linux, car tout est fichier).
	-Traiter les informations obtenu pour une meilleur visibilité ou compréhension
	-Inclure l'information voulu dans le dictionnaire qui sera par la suite envoyé au serveur
-Modules: psutil, subprocess
-exemple de code:

#Structure principal ou toutes les informations sont stockés
info={}

#Exemple de récupération d'une information
with open("/proc/cpuinfo", "r") as f:
    infoFichier = f.readlines()
#Exemple de traitement	
tempsActif = int(float(tempsActif))
tempsActifHeures = tempsActif // 3600
tempsActifMinutes = (tempsActif % 3600) // 60
#Ajout dans le dictionnaire qui sera envoyé au serveur via méthode POST
info['tempsActif'] = str(tempsActifHeures) + ":" + str(tempsActifMinutes) + " heures" #temps d'activité (uptime)

################################################Caractéristiques########################################################################
#Note, certaines informations n'ont pas besoin d'être traités.
info['nomHote']=socket.gethostname() #Nom de l'hôte 
info['platforme']=platform.system()


-------------------------------------------------------------------------

Fonctionnalité n°2:
-fichier : agent.py
-But : Envoyer les informations du système de l'agent au serveur 
-Personne responsable: Yanis
-Etapes:
	-préparation de la requête en créant des variables
	-éxécution de la requête
-Modules: requests
-exemple de code:

port = "8097"
url = "http://192.168.3.25:"+port

r = requests.post(url, data = info) #192.168.3.25  8097

-------------------------------------------------------------------------
Fonctionnalité n°3:
-fichier : agent.py
-But : Formater les données en format JSON
-Personne responsable: Yanis
-Etapes:
	-formater les données en format JSON
-Modules: json
-exemple de code:

info = json.dumps(info)

-------------------------------------------------------------------------

Fonctionnalité n°4:
-fichier : agent.py
-But : Récupérer les noms des services dans le fichier de configuration (csv)
-Personne responsable: Yanis
-Etapes:
	-Ouverture du fichier csv en mode lectureSeule
	-Récupération des données(services) de la sortie de la commande précédente
-Modules: csv
-exemple de code:

fichierCSV = csv.reader(open("config.csv","r"))
for ligne in fichierCSV:#Pour chaque ligne du fichier CSV
    for service in ligne: #On récupère les services à chaque ligne du fichier CSV



-------------------------------------------------------------------------

Fonctionnalité n°5:
-But :Valider qu'un service est bien actif 
-fichier : agent.py
-Personne responsable: Yanis
-Etapes:
-Modules: os, subprocess
-exemple de code:

#On vérifie son statut (en cachant le résultat de la commande dans le terminal)
with open(os.devnull, 'wb') as cacheSortie:
    estEnMarche = subprocess.Popen(['service', service, 'status'], stdout=cacheSortie, stderr=cacheSortie).wait()

if estEnMarche == 0:
    #Actif
else:
    #Inactif

-------------------------------------------------------------------------

Fonctionalité n°6:
- lien :https://blog.anvileight.com/posts/simple-python-http-server/
- But: Créer un serveur web qui écoute sur un port pour réceptionner les données et un autre qui créée une page 
web sur un autre port
- Personne responsable : Olimalt	
- Modules :http.server
- Exemple de code :

from http.server import HTTPServer, BaseHTTPRequestHandler


class SimpleHTTPRequestHandler(BaseHTTPRequestHandler):

    def do_GET(self):
        self.send_response(200)
        self.end_headers()
        self.wfile.write(b'Hello, world!')


httpd = HTTPServer(('localhost', 8000), SimpleHTTPRequestHandler)
httpd.serve_forever()


-------------------------------------------------------------------------

Fonctionalité n°7:
- lien : https://python.doctor/page-database-data-base-donnees-query-sql-mysql-postgre-sqlite
- But: Création d'une base de donnée sqlite, connexion, insertion de données
- Personne responsable : Olimalt	
- Modules :sqlite3
- Exemple de code : -> fichier joint schema_bdd.png

#!/usr/bin/env python3
# -*- coding: utf-8 -*-
import sqlite3

#Créer une base de données avec SQLite 
conn = sqlite3.connect('ma_base.db')

#Fermer la connection à la base


#Créer une table avec SQLite
cursor = conn.cursor()
cursor.execute("""
CREATE TABLE IF NOT EXISTS users(
     id INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE,
     name TEXT,
     age INTERGER
)
""")
conn.commit() 


#Insérer des données  
cursor.execute("""
INSERT INTO users(name, age) VALUES(?, ?)""", ("olivier", 30))

#Vous pouvez passer par un dictionnaire: 
data = {"name" : "olivier", "age" : 30}
cursor.execute("""
INSERT INTO users(name, age) VALUES(:name, :age)""", data)

#Récupérer des données 
cursor.execute("""SELECT name, age FROM users""")
user1 = cursor.fetchone()
print(user1)

#Supprimer une table avec SQLite:
cursor = conn.cursor()
cursor.execute("""
DROP TABLE users
""")
conn.commit()

conn.close()

-------------------------------------------------------------------------

Fonctionnalité n°8:
-But : Afficher et mettre en forme les informations stockés dans la base de donnée (page web)
-Personne responsable:Olimalt
-Modules: sqlite3 / gviz_api
-exemple de code: -> fichier joint la_vue.png

-------------------------------------------------------------------------

	
